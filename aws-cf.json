{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "AWS CloudFormation Sample Template AutoScalingRollingUpdates: Create a load balanced, Auto Scaled sample website. This example creates an Auto Scaling group behind a load balancer with a simple health check. The AutoScaling launch configuration includes an update policy that will keep 2 instances running while doing an autoscaling rolling upgrade. **WARNING** This template creates one or more Amazon EC2  instances and an Application Load Balancer. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters": {
    "VpcId" : {
      "Type" : "AWS::EC2::VPC::Id",
      "Description" : "VpcId of your existing Virtual Private Cloud (VPC)",
      "ConstraintDescription" : "must be the VPC Id of an existing Virtual Private Cloud.",
      "Default" : "vpc-61c71018"
    },

    "Subnets" : {
      "Type" : "List<AWS::EC2::Subnet::Id>",
      "Description" : "The list of SubnetIds in your Virtual Private Cloud (VPC)",
      "ConstraintDescription" : "must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud.",
      "Default" : "subnet-35bebf53, subnet-6088ca3a"
    },

    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"]
,
      "ConstraintDescription": "must be a valid EC2 instance type."
    },

    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair.",
      "Default" : "ssh-ec2"
    },

    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances, using port 22.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "TCPUDPLocation" : {
      "Description" : "The IP address range that can be used to access to the EC2 instances using port 3389.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "PrivateAccessIP" : {
      "Description" : "The IP address range that can be used to access to the EC2 instances using port 8080.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "192.168.1.67/32",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Mappings": {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "HVM64"  },
      "t2.nano"     : { "Arch" : "HVM64"  },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "t2.large"    : { "Arch" : "HVM64"  },
      "m1.small"    : { "Arch" : "HVM64"  },
      "m1.medium"   : { "Arch" : "HVM64"  },
      "m1.large"    : { "Arch" : "HVM64"  },
      "m1.xlarge"   : { "Arch" : "HVM64"  },
      "m2.xlarge"   : { "Arch" : "HVM64"  },
      "m2.2xlarge"  : { "Arch" : "HVM64"  },
      "m2.4xlarge"  : { "Arch" : "HVM64"  },
      "m3.medium"   : { "Arch" : "HVM64"  },
      "m3.large"    : { "Arch" : "HVM64"  },
      "m3.xlarge"   : { "Arch" : "HVM64"  },
      "m3.2xlarge"  : { "Arch" : "HVM64"  },
      "m4.large"    : { "Arch" : "HVM64"  },
      "m4.xlarge"   : { "Arch" : "HVM64"  },
      "m4.2xlarge"  : { "Arch" : "HVM64"  },
      "m4.4xlarge"  : { "Arch" : "HVM64"  },
      "m4.10xlarge" : { "Arch" : "HVM64"  },
      "c1.medium"   : { "Arch" : "HVM64"  },
      "c1.xlarge"   : { "Arch" : "HVM64"  },
      "c3.large"    : { "Arch" : "HVM64"  },
      "c3.xlarge"   : { "Arch" : "HVM64"  },
      "c3.2xlarge"  : { "Arch" : "HVM64"  },
      "c3.4xlarge"  : { "Arch" : "HVM64"  },
      "c3.8xlarge"  : { "Arch" : "HVM64"  },
      "c4.large"    : { "Arch" : "HVM64"  },
      "c4.xlarge"   : { "Arch" : "HVM64"  },
      "c4.2xlarge"  : { "Arch" : "HVM64"  },
      "c4.4xlarge"  : { "Arch" : "HVM64"  },
      "c4.8xlarge"  : { "Arch" : "HVM64"  },
      "g2.2xlarge"  : { "Arch" : "HVMG2"  },
      "g2.8xlarge"  : { "Arch" : "HVMG2"  },
      "r3.large"    : { "Arch" : "HVM64"  },
      "r3.xlarge"   : { "Arch" : "HVM64"  },
      "r3.2xlarge"  : { "Arch" : "HVM64"  },
      "r3.4xlarge"  : { "Arch" : "HVM64"  },
      "r3.8xlarge"  : { "Arch" : "HVM64"  },
      "i2.xlarge"   : { "Arch" : "HVM64"  },
      "i2.2xlarge"  : { "Arch" : "HVM64"  },
      "i2.4xlarge"  : { "Arch" : "HVM64"  },
      "i2.8xlarge"  : { "Arch" : "HVM64"  },
      "d2.xlarge"   : { "Arch" : "HVM64"  },
      "d2.2xlarge"  : { "Arch" : "HVM64"  },
      "d2.4xlarge"  : { "Arch" : "HVM64"  },
      "d2.8xlarge"  : { "Arch" : "HVM64"  },
      "hi1.4xlarge" : { "Arch" : "HVM64"  },
      "hs1.8xlarge" : { "Arch" : "HVM64"  },
      "cr1.8xlarge" : { "Arch" : "HVM64"  },
      "cc2.8xlarge" : { "Arch" : "HVM64"  }
    },

    "AWSInstanceType2NATArch" : {
      "t1.micro"    : { "Arch" : "NATHVM64"  },
      "t2.nano"     : { "Arch" : "NATHVM64"  },
      "t2.micro"    : { "Arch" : "NATHVM64"  },
      "t2.small"    : { "Arch" : "NATHVM64"  },
      "t2.medium"   : { "Arch" : "NATHVM64"  },
      "t2.large"    : { "Arch" : "NATHVM64"  },
      "m1.small"    : { "Arch" : "NATHVM64"  },
      "m1.medium"   : { "Arch" : "NATHVM64"  },
      "m1.large"    : { "Arch" : "NATHVM64"  },
      "m1.xlarge"   : { "Arch" : "NATHVM64"  },
      "m2.xlarge"   : { "Arch" : "NATHVM64"  },
      "m2.2xlarge"  : { "Arch" : "NATHVM64"  },
      "m2.4xlarge"  : { "Arch" : "NATHVM64"  },
      "m3.medium"   : { "Arch" : "NATHVM64"  },
      "m3.large"    : { "Arch" : "NATHVM64"  },
      "m3.xlarge"   : { "Arch" : "NATHVM64"  },
      "m3.2xlarge"  : { "Arch" : "NATHVM64"  },
      "m4.large"    : { "Arch" : "NATHVM64"  },
      "m4.xlarge"   : { "Arch" : "NATHVM64"  },
      "m4.2xlarge"  : { "Arch" : "NATHVM64"  },
      "m4.4xlarge"  : { "Arch" : "NATHVM64"  },
      "m4.10xlarge" : { "Arch" : "NATHVM64"  },
      "c1.medium"   : { "Arch" : "NATHVM64"  },
      "c1.xlarge"   : { "Arch" : "NATHVM64"  },
      "c3.large"    : { "Arch" : "NATHVM64"  },
      "c3.xlarge"   : { "Arch" : "NATHVM64"  },
      "c3.2xlarge"  : { "Arch" : "NATHVM64"  },
      "c3.4xlarge"  : { "Arch" : "NATHVM64"  },
      "c3.8xlarge"  : { "Arch" : "NATHVM64"  },
      "c4.large"    : { "Arch" : "NATHVM64"  },
      "c4.xlarge"   : { "Arch" : "NATHVM64"  },
      "c4.2xlarge"  : { "Arch" : "NATHVM64"  },
      "c4.4xlarge"  : { "Arch" : "NATHVM64"  },
      "c4.8xlarge"  : { "Arch" : "NATHVM64"  },
      "g2.2xlarge"  : { "Arch" : "NATHVMG2"  },
      "g2.8xlarge"  : { "Arch" : "NATHVMG2"  },
      "r3.large"    : { "Arch" : "NATHVM64"  },
      "r3.xlarge"   : { "Arch" : "NATHVM64"  },
      "r3.2xlarge"  : { "Arch" : "NATHVM64"  },
      "r3.4xlarge"  : { "Arch" : "NATHVM64"  },
      "r3.8xlarge"  : { "Arch" : "NATHVM64"  },
      "i2.xlarge"   : { "Arch" : "NATHVM64"  },
      "i2.2xlarge"  : { "Arch" : "NATHVM64"  },
      "i2.4xlarge"  : { "Arch" : "NATHVM64"  },
      "i2.8xlarge"  : { "Arch" : "NATHVM64"  },
      "d2.xlarge"   : { "Arch" : "NATHVM64"  },
      "d2.2xlarge"  : { "Arch" : "NATHVM64"  },
      "d2.4xlarge"  : { "Arch" : "NATHVM64"  },
      "d2.8xlarge"  : { "Arch" : "NATHVM64"  },
      "hi1.4xlarge" : { "Arch" : "NATHVM64"  },
      "hs1.8xlarge" : { "Arch" : "NATHVM64"  },
      "cr1.8xlarge" : { "Arch" : "NATHVM64"  },
      "cc2.8xlarge" : { "Arch" : "NATHVM64"  }
    }
,
    "AWSRegionArch2AMI" : {
      "af-south-1"       : {"HVM64" : "ami-064cc455f8a1ef504", "HVMG2" : "NOT_SUPPORTED"},
      "ap-east-1"        : {"HVM64" : "ami-f85b1989", "HVMG2" : "NOT_SUPPORTED"},
      "ap-northeast-1"   : {"HVM64" : "ami-0b2c2a754d5b4da22", "HVMG2" : "ami-09d0e0e099ecabba2"},
      "ap-northeast-2"   : {"HVM64" : "ami-0493ab99920f410fc", "HVMG2" : "NOT_SUPPORTED"},
      "ap-northeast-3"   : {"HVM64" : "ami-01344f6f63a4decc1", "HVMG2" : "NOT_SUPPORTED"},
      "ap-south-1"       : {"HVM64" : "ami-03cfb5e1fb4fac428", "HVMG2" : "ami-0244c1d42815af84a"},
      "ap-southeast-1"   : {"HVM64" : "ami-0ba35dc9caf73d1c7", "HVMG2" : "ami-0e46ce0d6a87dc979"},
      "ap-southeast-2"   : {"HVM64" : "ami-0ae99b503e8694028", "HVMG2" : "ami-0c0ab057a101d8ff2"},
      "ca-central-1"     : {"HVM64" : "ami-0803e21a2ec22f953", "HVMG2" : "NOT_SUPPORTED"},
      "cn-north-1"       : {"HVM64" : "ami-07a3f215cc90c889c", "HVMG2" : "NOT_SUPPORTED"},
      "cn-northwest-1"   : {"HVM64" : "ami-0a3b3b10f714a0ff4", "HVMG2" : "NOT_SUPPORTED"},
      "eu-central-1"     : {"HVM64" : "ami-0474863011a7d1541", "HVMG2" : "ami-0aa1822e3eb913a11"},
      "eu-north-1"       : {"HVM64" : "ami-0de4b8910494dba0f", "HVMG2" : "ami-32d55b4c"},
      "eu-south-1"       : {"HVM64" : "ami-08427144fe9ebdef6", "HVMG2" : "NOT_SUPPORTED"},
      "eu-west-1"        : {"HVM64" : "ami-015232c01a82b847b", "HVMG2" : "ami-0d5299b1c6112c3c7"},
      "eu-west-2"        : {"HVM64" : "ami-0765d48d7e15beb93", "HVMG2" : "NOT_SUPPORTED"},
      "eu-west-3"        : {"HVM64" : "ami-0caf07637eda19d9c", "HVMG2" : "NOT_SUPPORTED"},
      "me-south-1"       : {"HVM64" : "ami-0744743d80915b497", "HVMG2" : "NOT_SUPPORTED"},
      "sa-east-1"        : {"HVM64" : "ami-0a52e8a6018e92bb0", "HVMG2" : "NOT_SUPPORTED"},
      "us-east-1"        : {"HVM64" : "ami-032930428bf1abbff", "HVMG2" : "ami-0aeb704d503081ea6"},
      "us-east-2"        : {"HVM64" : "ami-027cab9a7bf0155df", "HVMG2" : "NOT_SUPPORTED"},
      "us-west-1"        : {"HVM64" : "ami-088c153f74339f34c", "HVMG2" : "ami-0a7fc72dc0e51aa77"},
      "us-west-2"        : {"HVM64" : "ami-01fee56b22f308154", "HVMG2" : "ami-0fe84a5b4563d8f27"}
    }

  },

  "Resources": {
    "IAMPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect" : "Allow",
            "Resource" : "*",
            "Action" : ["autoscaling:CompleteLifecycleAction"]
            }]
          }
        }
    },
    "LambdaRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns" : ["arn:aws:iam::aws:policy/AmazonSSMFullAccess", "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole", { "Ref" : "IAMPolicy"}],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Principal" : { "Service" : ["lambda.amazonaws.com"]},
            "Action" : "sts:AssumeRole"
            }]
        }
      }
    },
    "InstanceRole" : {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM", { "Ref" : "IAMPolicy"}],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement" : [{
            "Effect" : "Allow",
            "Principal" : { "Service" : ["ec2.amazonaws.com"]},
            "Action" : "sts:AssumeRole"
            }]
        }
      }
    },
    "IamInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles" : [{ "Ref" : "InstanceRole"}]
      }
    },
    "WebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M",
          "Count"   : "1"
        }
      },
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MaxBatchSize" : "1",
          "MinInstancesInService" : "2",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "true"
        }
      },
      "Properties": {
        "VPCZoneIdentifier" : { "Ref" : "Subnets" },
        "LaunchConfigurationName": { "Ref": "LaunchConfig" },
        "MinSize": "2",
        "MaxSize": "6",
        "DesiredCapacity" : "2",
        "MetricsCollection": [{"Granularity":"1Minute"}],
        "TargetGroupARNs": [ { "Ref": "ALBTargetGroup" } ]
      }
    },
    "InstanceShutdown" : {
      "Type" : "AWS::AutoScaling::LifecycleHook",
      "Properties" : {
        "AutoScalingGroupName" : { "Ref" : "WebServerGroup"},
        "LifecycleTransition" : "autoscaling:EC2_INSTANCE_TERMINATING"
      }
    },

    "Bucket" : {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "AccessControl" : "Private",
        "VersioningConfiguration" : { "Status" : "Suspended"}
      }
    },
    "Document" : {
      "Type" : "AWS::SSM::Document",
      "Properties" : {
        "Content" : {
          "schemaVersion": "1.2",
          "description": "Backup logs to S3",
          "parameters": {},
          "runtimeConfig": {
            "aws:runShellScript": {
              "properties": { "Fn::Join" : ["", [
                "[main]\n",
                "stack=", { "Ref" : "AWS::StackId" }, "\n",
                "region=", { "Ref" : "AWS::Region" }, "\n"
              ]]},
              "runCommand": { "Fn::Join" : ["", [
                "\n",
                "ASGNAME=",{ "Ref" : "WebServerGroup" }, "\n",
                "LIFECYCLEHOOKNAME=",{ "Ref" : "InstanceShutdown" }, "\n",
                "BACKUPDIRECTORY='/var/log'\n",
                "S3BUCKET=",{ "Ref" : "Bucket" }, "\n",
                "INSTANCEID=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n",
                "REGION=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)\n",
                "REGION=${!REGION::-1}\n",
                "HOOKRESULT='CONTINUE'\n",
                "MESSAGE=''\n",
                "\n",
                "tar -cf /tmp/${!INSTANCEID}.tar $BACKUPDIRECTORY &> /tmp/backup\n",
                "if [ $? -ne 0 ]\n",
                "then\n",
                "   MESSAGE=$(cat /tmp/backup)\n",
                "else\n",
                "   aws s3 cp /tmp/${!INSTANCEID}.tar s3://${!S3BUCKET}/${!INSTANCEID}/ &> /tmp/backup\n",
                "       MESSAGE=$(cat /tmp/backup)\n",
                "fi\n",
                "\n",
                "aws autoscaling complete-lifecycle-action --lifecycle-hook-name ${!LIFECYCLEHOOKNAME} --auto-scaling-group-name ${!ASGNAME} --lifecycle-action-result ${!HOOKRESULT} --instance-id ${!INSTANCEID}  --region ${!REGION}"
              ]]}
            }
          }
        }
      }
    },
    "LambdaFunction" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code" : {
          "ZipFile": "import boto3
          import json
          import logging
          import time

          logger = logging.getLogger()
          logger.setLevel(logging.DEBUG)
          ssm_client = boto3.client(\"ssm\")

          LIFECYCLE_KEY = \"LifecycleHookName\"
          ASG_KEY = \"AutoScalingGroupName\"
          EC2_KEY = \"EC2InstanceId\"
          DOCUMENT_NAME = \"ASGLogBackup\"
          RESPONSE_DOCUMENT_KEY = \"DocumentIdentifiers\"

          def check_response(response_json):
              try:
                  if response_json['ResponseMetadata']['HTTPStatusCode'] == 200:
                      return True
                  else:
                      return False
              except KeyError:
                  return False

          def list_document():
              document_filter_parameters = {'key': 'Name', 'value': DOCUMENT_NAME}
              response = ssm_client.list_documents(
                  DocumentFilterList=[ document_filter_parameters ]
              )
              return response

          def check_document():
              # If the document already exists, it will not create it.
              try:
                  response = list_document()
                  if check_response(response):
                      logger.info(\"Documents list: %s\", response)
                      if response[RESPONSE_DOCUMENT_KEY]:
                          logger.info(\"Documents exists: %s\", response)
                          return True
                      else:
                          return False
                  else:
                      logger.error(\"Documents' list error: %s\", response)
                      return False
              except Exception, e:
                  logger.error(\"Document error: %s\", str(e))
                  return None

          def send_command(instance_id):
              # Until the document is not ready, waits in accordance to a backoff mechanism.
              while True:
                  timewait = 1
                  response = list_document()
                  if any(response[RESPONSE_DOCUMENT_KEY]):
                      break
                  time.sleep(timewait)
                  timewait += timewait
              try:
                  response = ssm_client.send_command(
                      InstanceIds = [ instance_id ],
                      DocumentName = DOCUMENT_NAME,
                      TimeoutSeconds = 120
                      )
                  if check_response(response):
                      logger.info(\"Command sent: %s\", response)
                      return response['Command']['CommandId']
                  else:
                      logger.error(\"Command could not be sent: %s\", response)
                      return None
              except Exception, e:
                  logger.error(\"Command could not be sent: %s\", str(e))
                  return None

          def check_command(command_id, instance_id):
              timewait = 1
              while True:
                  response_iterator = ssm_client.list_command_invocations(
                      CommandId = command_id,
                      InstanceId = instance_id,
                      Details=False
                      )
                  if check_response(response_iterator):
                      if response_iterator['CommandInvocations']:
                        response_iterator_status = response_iterator['CommandInvocations'][0]['Status']
                        if response_iterator_status != 'Pending':
                            if response_iterator_status == 'InProgress' or response_iterator_status == 'Success':
                                logging.info( \"Status: %s\", response_iterator_status)
                                return True
                            else:
                                logging.error(\"ERROR: status: %s\", response_iterator)
                                return False
                  time.sleep(timewait)
                  timewait += timewait

          def abandon_lifecycle(life_cycle_hook, auto_scaling_group, instance_id):
              asg_client = boto3.client('autoscaling')
              try:
                  response = asg_client.complete_lifecycle_action(
                      LifecycleHookName=life_cycle_hook,
                      AutoScalingGroupName=auto_scaling_group,
                      LifecycleActionResult='ABANDON',
                      InstanceId=instance_id
                      )
                  if check_response(response):
                      logger.info(\"Lifecycle hook abandoned correctly: %s\", response)
                  else:
                      logger.error(\"Lifecycle hook could not be abandoned: %s\", response)
              except Exception, e:
                  logger.error(\"Lifecycle hook abandon could not be executed: %s\", str(e))
                  return None

          def lambda_handler(event, context):
              try:
                  logger.info(json.dumps(event))
                  message = event['detail']
                  if LIFECYCLE_KEY in message and ASG_KEY in message:
                      life_cycle_hook = message[LIFECYCLE_KEY]
                      auto_scaling_group = message[ASG_KEY]
                      instance_id = message[EC2_KEY]
                      if check_document():
                          command_id = send_command(instance_id)
                          if command_id != None:
                              if check_command(command_id, instance_id):
                                  logging.info(\"Lambda executed correctly\")
                              else:
                                  abandon_lifecycle(life_cycle_hook, auto_scaling_group, instance_id)
                          else:
                              abandon_lifecycle(life_cycle_hook, auto_scaling_group, instance_id)
                      else:
                          abandon_lifecycle(life_cycle_hook, auto_scaling_group, instance_id)
                  else:
                      logging.error(\"No valid JSON message: %s\", parsed_message)
              except Exception, e:
                  logging.error(\"Error: %s\", str(e))"
        },
        "Handler" : "index.lambda_handler",
        "Role" : { "Fn::GetAtt" : [ "LambdaRole", "Arn" ] },
        "Runtime" : "python2.7",
        "Environment" : { "Variables" : {
          "DOCUMENT_NAME" : { "Ref" : "Document"}
          }}
      }
    },
    "LambdaPermissions" : {
      "Type" : "AWS::Lambda::Permission",
      "Properties" : {
        "Action" : "lambda:InvokeFunction",
        "FunctionName" : { "Fn::GetAtt" : [ "LambdaFunction", "Arn" ] },
        "Principal" : "events.amazonaws.com"
      }
    },
    "EventsRule" : {
      "Type" : "AWS::Events::Rule",
      "Properties" : {
        "EventPattern" : {
          "source" : ["aws.autoscaling"],
          "detail" : {
            "LifecycleTransition": ["autoscaling:EC2_INSTANCE_TERMINATING"]
          }
        },
        "Targets" : [{
          "Arn" : { "Fn::GetAtt" : [ "LambdaFunction", "Arn" ] },
          "Id" : "target"
          }]
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "Comment" : "Install a simple application",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource LaunchConfig ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              }
            },

            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
          }
        }
      },
      "Properties": {
        "KeyName": { "Ref": "KeyName" },
        "ImageId": {
          "Fn::FindInMap": [ "AWSRegionArch2AMI", { "Ref": "AWS::Region" },
            { "Fn::FindInMap": [ "AWSInstanceType2Arch", { "Ref": "InstanceType" }, "Arch" ] } ]
        },
        "SecurityGroups": [ { "Ref": "InstanceSecurityGroup" } ],
        "IamInstanceProfile": { "Ref": "IamInstanceProfile" },
        "InstanceMonitoring" : "false",
        "InstanceType": { "Ref": "InstanceType" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             "yum update -y aws-cfn-bootstrap\n",
             "sudo yum install amazon-ssm-agent -y\n",
             "sudo /sbin/start amazon-ssm-agent &\n",
             "mkdir /opt/nodejs\n",
             "curl https://nodejs.org/dist/v8.12.0/node-v8.12.0-linux-x64.tar.gz | tar xvzf - -C /opt/nodejs --strip-components=1\n",
             "ln -s /opt/nodejs/bin/node /usr/bin/node\n",
             "ln -s /opt/nodejs/bin/npm /usr/bin/npm\n",
             "wget https://raw.githubusercontent.com/GoogleCloudPlatform/nodejs-getting-started/master/gce/app.js\n",
             "wget https://raw.githubusercontent.com/GoogleCloudPlatform/nodejs-getting-started/master/gce/package.json\n",
             "npm install\n",
             "npm start &\n",
             "/opt/aws/bin/cfn-init -v ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource LaunchConfig ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",

             "/opt/aws/bin/cfn-signal -e $? ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource WebServerGroup ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
  },

    "ApplicationLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Subnets" : { "Ref" : "Subnets"},
        "SecurityGroups" : [{ "Ref" : "ELBSecurityGroup" }]
      }
    },

    "ALBListener" : {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "Properties" : {
        "DefaultActions" : [{
          "Type" : "forward",
          "TargetGroupArn" : { "Ref" : "ALBTargetGroup" }
        }],
        "LoadBalancerArn" : { "Ref" : "ApplicationLoadBalancer" },
        "Port" : "80",
        "Protocol" : "HTTP"
      }
    },

    "ALBTargetGroup" : {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "HealthCheckIntervalSeconds" : 30,
        "HealthCheckPath" : "/",
        "HealthCheckTimeoutSeconds" : 5,
        "HealthyThresholdCount" : 3,
        "Port" : 8080,
        "Protocol" : "HTTP",
        "UnhealthyThresholdCount" : 5,
        "VpcId" : {"Ref" : "VpcId"}
      }
    },

    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable SSH access and HTTP access on the configured port.",
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": { "Ref" : "SSHLocation" } },
          {"IpProtocol" : "tcp","FromPort" : "80","ToPort" : "8080","SourceSecurityGroupId" : {"Fn::Select" : [0, {"Fn::GetAtt" : ["ApplicationLoadBalancer", "SecurityGroups"]}]}},
          { "IpProtocol": "tcp", "FromPort": "3389", "ToPort": "3389", "CidrIp": { "Ref" : "TCPUDPLocation" } },
          { "IpProtocol": "tcp", "FromPort": "8080", "ToPort": "8080", "CidrIp": { "Ref" : "PrivateAccessIP" } }
        ],
        "VpcId" : { "Ref" : "VpcId" }
      }
    },
    "ELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable application access on the Load Balancer at port 80.",
        "SecurityGroupIngress": [
          { "IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0" }
        ],
        "VpcId" : { "Ref" : "VpcId" }
      }
    }
  },

  "Outputs": {
    "URL": {
      "Description": "Load Balancer URL from which the application is publicly accesible.",
      "Value": { "Fn::Join": [ "", [ "http://", { "Fn::GetAtt": [ "ApplicationLoadBalancer", "DNSName" ] } ] ] }
    }
  }
}
