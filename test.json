{ "Fn::Join" : ["", [
"import boto3\n",
"import json\n",
"import logging\n",
"import time\n",
"\n",
"logger = logging.getLogger()\n",
"logger.setLevel(logging.DEBUG)\n",
"ssm_client = boto3.client(\"ssm\")\n",
"\n",
"LIFECYCLE_KEY = \"LifecycleHookName\"\n",
"ASG_KEY = \"AutoScalingGroupName\"\n",
"EC2_KEY = \"EC2InstanceId\"\n",
"DOCUMENT_NAME = \"ASGLogBackup\"\n",
"RESPONSE_DOCUMENT_KEY = \"DocumentIdentifiers\"\n",
"\n",
"def check_response(response_json):\n",
"\ttry:\n",
"\t\tif response_json['ResponseMetadata']['HTTPStatusCode'] == 200:\n",
"\t\t\treturn True\n",
"\t\telse:\n",
"\t\t\treturn False\n",
"\texcept KeyError:\n",
"\t\treturn False\n",
"\n",
"def list_document():\n",
"\tdocument_filter_parameters = {'key': 'Name', 'value': DOCUMENT_NAME}\n",
"\tresponse = ssm_client.list_documents(\n",
"\t\tDocumentFilterList=[ document_filter_parameters ]\n",
"\t)\n",
"\treturn response\n",
"\n",
"def check_document():\n",
"\t# If the document already exists, it will not create it.\n",
"\ttry:\n",
"\t\tresponse = list_document()\n",
"\t\tif check_response(response):\n",
"\t\t\tlogger.info(\"Documents list: %s\", response)\n",
"\t\t\tif response[RESPONSE_DOCUMENT_KEY]:\n",
"\t\t\t\tlogger.info(\"Documents exists: %s\", response)\n",
"\t\t\t\treturn True\n",
"\t\t\telse:\n",
"\t\t\t\treturn False\n",
"\t\telse:\n",
"\t\t\tlogger.error(\"Documents' list error: %s\", response)\n",
"\t\t\treturn False\n",
"\texcept Exception, e:\n",
"\t\tlogger.error(\"Document error: %s\", str(e))\n",
"\t\treturn None\n",
"\n",
"def send_command(instance_id):\n",
"\t# Until the document is not ready, waits in accordance to a backoff mechanism.\n",
"\twhile True:\n",
"\t\ttimewait = 1\n",
"\t\tresponse = list_document()\n",
"\t\tif any(response[RESPONSE_DOCUMENT_KEY]):\n",
"\t\t\tbreak\n",
"\t\ttime.sleep(timewait)\n",
"\t\ttimewait += timewait\n",
"\ttry:\n",
"\t\tresponse = ssm_client.send_command(\n",
"\t\t\tInstanceIds = [ instance_id ],\n",
"\t\t\tDocumentName = DOCUMENT_NAME,\n",
"\t\t\tTimeoutSeconds = 120\n",
"\t\t\t)\n",
"\t\tif check_response(response):\n",
"\t\t\tlogger.info(\"Command sent: %s\", response)\n",
"\t\t\treturn response['Command']['CommandId']\n",
"\t\telse:\n",
"\t\t\tlogger.error(\"Command could not be sent: %s\", response)\n",
"\t\t\treturn None\n",
"\texcept Exception, e:\n",
"\t\tlogger.error(\"Command could not be sent: %s\", str(e))\n",
"\t\treturn None\n",
"\n",
"def check_command(command_id, instance_id):\n",
"\ttimewait = 1\n",
"\twhile True:\n",
"\t\tresponse_iterator = ssm_client.list_command_invocations(\n",
"\t\t\tCommandId = command_id,\n",
"\t\t\tInstanceId = instance_id,\n",
"\t\t\tDetails=False\n",
"\t\t\t)\n",
"\t\tif check_response(response_iterator):\n",
"\t\t\tif response_iterator['CommandInvocations']:\n",
"\t\t\t  response_iterator_status = response_iterator['CommandInvocations'][0]['Status']\n",
"\t\t\t  if response_iterator_status != 'Pending':\n",
"\t\t\t\t  if response_iterator_status == 'InProgress' or response_iterator_status == 'Success':\n",
"\t\t\t\t\t  logging.info( \"Status: %s\", response_iterator_status)\n",
"\t\t\t\t\t  return True\n",
"\t\t\t\t  else:\n",
"\t\t\t\t\t  logging.error(\"ERROR: status: %s\", response_iterator)\n",
"\t\t\t\t\t  return False\n",
"\t\ttime.sleep(timewait)\n",
"\t\ttimewait += timewait\n",
"\n",
"def abandon_lifecycle(life_cycle_hook, auto_scaling_group, instance_id):\n",
"\tasg_client = boto3.client('autoscaling')\n",
"\ttry:\n",
"\t\tresponse = asg_client.complete_lifecycle_action(\n",
"\t\t\tLifecycleHookName=life_cycle_hook,\n",
"\t\t\tAutoScalingGroupName=auto_scaling_group,\n",
"\t\t\tLifecycleActionResult='ABANDON',\n",
"\t\t\tInstanceId=instance_id\n",
"\t\t\t)\n",
"\t\tif check_response(response):\n",
"\t\t\tlogger.info(\"Lifecycle hook abandoned correctly: %s\", response)\n",
"\t\telse:\n",
"\t\t\tlogger.error(\"Lifecycle hook could not be abandoned: %s\", response)\n",
"\texcept Exception, e:\n",
"\t\tlogger.error(\"Lifecycle hook abandon could not be executed: %s\", str(e))\n",
"\t\treturn None\n",
"\n",
"def lambda_handler(event, context):\n",
"\ttry:\n",
"\t\tlogger.info(json.dumps(event))\n",
"\t\tmessage = event['detail']\n",
"\t\tif LIFECYCLE_KEY in message and ASG_KEY in message:\n",
"\t\t\tlife_cycle_hook = message[LIFECYCLE_KEY]\n",
"\t\t\tauto_scaling_group = message[ASG_KEY]\n",
"\t\t\tinstance_id = message[EC2_KEY]\n",
"\t\t\tif check_document():\n",
"\t\t\t\tcommand_id = send_command(instance_id)\n",
"\t\t\t\tif command_id != None:\n",
"\t\t\t\t\tif check_command(command_id, instance_id):\n",
"\t\t\t\t\t\tlogging.info(\"Lambda executed correctly\")\n",
"\t\t\t\t\telse:\n",
"\t\t\t\t\t\tabandon_lifecycle(life_cycle_hook, auto_scaling_group, instance_id)\n",
"\t\t\t\telse:\n",
"\t\t\t\t\tabandon_lifecycle(life_cycle_hook, auto_scaling_group, instance_id)\n",
"\t\t\telse:\n",
"\t\t\t\tabandon_lifecycle(life_cycle_hook, auto_scaling_group, instance_id)\n",
"\t\telse:\n",
"\t\t\tlogging.error(\"No valid JSON message: %s\", parsed_message)\n",
"\texcept Exception, e:\n",
"\t\tlogging.error(\"Error: %s\", str(e))"]]}
